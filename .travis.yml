# You must sign into travis-ci.org and set the commit hook on your project for travis to
# run on your project. The secure: variable must be generated by running `travis encrypt`
# on a github oauth key that you can generate using curl.

language:
    node_js
node_js:
    - 0.8
branches:
    only:
        - master
env:
    global:
        # GH_OAUTH_TOKEN is the oauth token generated as described at
        # https://help.github.com/articles/creating-an-oauth-token-for-command-line-use
        #
        # curl -u 'username' -d '{"scopes":["repo"],"note":"push to gh-pages from travis"}' https://api.github.com/authorizations
        #
        # It must be encrypted using the travis gem
        # http://about.travis-ci.org/docs/user/build-configuration/#Secure-environment-variables
        #
        # travis encrypt GH_OAUTH_TOKEN=b2797fff05e7461c4c8174fae08fb006cbadba9f
        #
        # User specific env variables
        - secure: "N472IILHDBd4aJIJJ8Lu3HdlOum7oZzZIdvcUp86MFXskeZlSC0k8qFRPEYW\n+v/mbn/kKuMymX+k6oSzdMSeT7mtRyg7em2doX4VzFmc1LT/AOQCSw1uKfo0\n+Ow46Ps5vFIA/snlSROmT03klNR0h3WxS7WJhWq1EExo28hoWL4="

        - GH_USER_NAME: pwmckenna
        - GH_PROJECT_NAME: mduel
        # This .travis.yml file instructs travis-ci.org to build your master branch using `yeoman build`
        # and deploy the output to your project's gh-pages branch.

before_script:
    # install dependencies
    - gem install compass
    - gem install jpegtran
    - gem install optipng
    - npm install -g yo grunt-cli bower
script:
    # We want to gate on passing tests and a successful build
    - bower install
    - grunt
after_success:
    # Any command that using GH_OAUTH_TOKEN must pipe the output to /dev/null to not expose your oauth token
    - git submodule add -b gh-pages https://${GH_OAUTH_TOKEN}@github.com/${GH_USER_NAME}/${GH_PROJECT_NAME} site 2>&1
    - cd site
    - git checkout gh-pages
    - git rm -r .
    - cp -R ../dist/* .
    - cp ../dist/.* .
    - git add -f .
    - git commit -am "adding the yeoman build files to gh-pages"
    # Any command that using GH_OAUTH_TOKEN must pipe the output to /dev/null to not expose your oauth token
    - git push https://${GH_OAUTH_TOKEN}@github.com/${GH_USER_NAME}/${GH_PROJECT_NAME} gh-pages > /dev/null 2>&1
